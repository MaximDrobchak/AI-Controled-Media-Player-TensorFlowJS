type Account {
  id: Int!
  playlist: String
  model: String
  field5: Int
  field6: Int
}

type GenericResponse {
  success: Boolean
}

type Mutation {
  createUser(
    password: String
    username: String
    createdAt: String!
    updatedAt: String!
    email: String
  ): User
  updateUser(
    id: Int
    password: String
    username: String
    createdAt: String
    updatedAt: String
    email: String
  ): User
  deleteUser(id: Int!): GenericResponse
  createAccount(
    playlist: String
    model: String
    field5: Int
    field6: Int
  ): Account
  updateAccount(
    id: Int
    playlist: String
    model: String
    field5: Int
    field6: Int
  ): Account
  deleteAccount(id: Int!): GenericResponse
}

type Query {
  users(
    limit: Int
    order: String

    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): [User]
  user(
    id: Int

    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
  ): User
  account(
    id: Int

    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
  ): Account
}

"""
The `JSON` scalar type represents raw JSON as values.
"""
scalar SequelizeJSON

type User {
  id: Int!
  password: String
  username: String
  createdAt: String!
  updatedAt: String!
  email: String
}
